hoomd_script::init::create_empty hoomd_script::pair::lj hoomd_script::integrate::mode_standard hoomd_script::integrate::nve
# Due to deficiencies in doxygen, the commands used in this example are listed explicitly here
# run this script with "python -x filename" to skip the first line, or remove this header

# ---- init_create_empty.py ----
from hoomd_script import *
import random

# parameters of the simple cubic crystal
a = 1.2
m = 10

system = init.create_empty(N=m*m*m, box=(m*a, m*a, m*a), n_particle_types=2)

# initialize a simple cubic array of particles
lo = - m*a / 2.0;
for p in system.particles:
    (i, j, k) = (p.tag % m, p.tag/m % m, p.tag/m**2  % m)
    p.position = (lo + i*a + a/2, lo + j*a + a/2, lo + k*a + a/2)

# make the top half type B
top = group.cuboid(name="top", ymin=0)
for p in top:
    p.type = 'B'

# initialize the velocities to be a thermal distribution
random.seed(1234);
T = 1.0
px = py = pz = 0.0;
for p in system.particles:
    mass = p.mass;
    vx = random.gauss(0, T / mass)
    vy = random.gauss(0, T / mass)
    vz = random.gauss(0, T / mass)
    
    p.velocity = (vx, vy, vz)
    
    # sum the total system momentum
    px += mass*vx;
    py += mass*vy;
    pz += mass*vz;

# compute average momentum
px /= m*m*m;
py /= m*m*m;
pz /= m*m*m;

# subtract that average momentum from each particle
for p in system.particles:
    mass = p.mass;
    v = p.velocity;
    p.velocity = (v[0] - px/mass, v[1] - py/mass, v[2] - pz/mass);

# simple lennard jones potential
lj = pair.lj(r_cut=3.0)
lj.pair_coeff.set('A', 'A', epsilon=1.0, sigma=1.0)
lj.pair_coeff.set('A', 'B', epsilon=1.0, sigma=1.0)
lj.pair_coeff.set('B', 'B', epsilon=1.0, sigma=1.0)

# integrate forward in the nve ensemble
all = group.all()
integrate.mode_standard(dt=0.005)
integrate.nve(group=all)

# run for 20k steps
run(20000)

