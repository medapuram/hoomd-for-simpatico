##### These are real memory leaks, but cannot be easily resolved
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:kiss_fftnd_alloc
}

# CUDA false positives
{
   <cudaThreadExit leak>
   Memcheck:Leak
   fun:_Znwm
   ...
   fun:cudaThreadExit
}

{
   <leaks in cuInit>
   Memcheck:Leak
   ...
   fun:cuInit
}

{
   <more leaks in cudaDriverGetVersion>
   Memcheck:Leak
   fun:malloc
   ...
   fun:cudaDriverGetVersion
}

{
   <yet more cudaDriverGetVersion leaks>
   Memcheck:Leak
   fun:calloc
   ...
   fun:cudaDriverGetVersion
}

{
   <cudaFree leaks>
   Memcheck:Leak
   fun:malloc
   ...
   fun:cudaFree
}

{
   <more cudaFree leaks>
   Memcheck:Leak
   fun:realloc
   ...
   fun:cudaFree
}

{
   <yer more cudaFree leaks>
   Memcheck:Leak
   fun:calloc
   ...
   fun:cudaFree
}

{
   <cudaRegister leaks>
   Memcheck:Leak
   fun:malloc
   ...
   fun:__cudaRegisterFatBinary
}

# OpenMP false positives
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:calloc
   fun:_dl_allocate_tls
   fun:pthread_create*
   obj:*libgomp*
}

{
   <leak in set_num_threads>
   Memcheck:Leak
   fun:malloc
   ...
   fun:omp_set_num_threads
}

{
   <catch all for gomp leaks>
   Memcheck:Leak
   fun:*alloc
   ...
   obj:/usr/lib64/libgomp.*
}

# additional python supressions
{
   <python_free_value8_error>
   Memcheck:Value8
   fun:PyObject_Free
}

{
   <python_realloc_value8_error>
   Memcheck:Value8
   fun:PyObject_Realloc
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyObject_RichCompare
}

{
   <python_leak_simpletype>
   Memcheck:Leak
   fun:malloc
   fun:alloc_format_string
   fun:SimpleType_new
}

{
   <python_leak_funcptr>
   Memcheck:Leak
   fun:malloc
   fun:alloc_format_string
   fun:CFuncPtrType_new
}

{
   <python_leak_subract>
   Memcheck:Leak
   fun:malloc
   fun:gentype_alloc
   fun:double_subtract
   fun:binary_op1
   fun:PyNumber_Subtract
}

{
   <python_leak_PyArray>
   Memcheck:Leak
   fun:malloc
   fun:PyArray_NewFromDescr
}

{
   <python_leak_string>
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromString
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_Malloc
}

{
   Memcheck:Leak
   fun:malloc
   fun:_compile
   fun:PyEval_EvalFrameEx
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:type_new
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:_compile
   fun:PyEval_EvalFrameEx
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:array_alloc
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:PyString_FromStringAndSize
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:dictresize
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:PyFloat_FromDouble
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:PyInt_FromLong
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:_PyInt_Init
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   ...
   fun:StructUnionType_new
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:Py_InitializeEx
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:set_conversion_mode
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:Py*
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:*alloc
   fun:Py*
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:Py*
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:*alloc
   fun:Py*
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:s_init
   fun:type_call
   fun:PyObject_Call
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:realloc
   fun:_PyString_Resize
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:calculate_path
   fun:Py_GetProgramFullPath
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:_PyUnicode_New
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:alloc_format_string
   fun:PointerType_new
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:Py*
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:*alloc
   ...
   fun:_PyImport_GetDynLoadFunc
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:_init_datetime_descr
   fun:PyArray_DescrFromTypeObject
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:realloc
   fun:listinsert
   fun:PyEval_EvalFrameEx
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:realloc
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyType_Ready
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:realloc
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyType_Ready
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:Py_GetProgramFullPath
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyDict_Merge
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyType_Ready
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyDict_SetItemString
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyObject_GenericSetAttr
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:_PyInt_Init
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:_PyInt_Init
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyInt_FromLong
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyEval_EvalFrame
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   obj:/usr/lib64/libpython2.4.so.1.0
   fun:PyString_InternInPlace
}
# boost::python leaks

{
   <boost_python_leak_all>
   Memcheck:Leak
   fun:_Znwm
}

# python supressions
#
# This is a valgrind suppression file that should be used when using valgrind.
#
#  Here's an example of running valgrind:
#
#   cd python/dist/src
#   valgrind --tool=memcheck --suppressions=Misc/valgrind-python.supp \
#       ./python -E -tt ./Lib/test/regrtest.py -u bsddb,network
#
# You must edit Objects/obmalloc.c and uncomment Py_USING_MEMORY_DEBUGGER
# to use the preferred suppressions with Py_ADDRESS_IN_RANGE.
#
# If you do not want to recompile Python, you can uncomment
# suppressions for PyObject_Free and PyObject_Realloc.
#
# See Misc/README.valgrind for more information.

# all tool names: Addrcheck,Memcheck,cachegrind,helgrind,massif
{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Invalid read of size 8 (x86_64 aka amd64)
   Memcheck:Value8
   fun:Py_ADDRESS_IN_RANGE
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:Py_ADDRESS_IN_RANGE
}

#
# Leaks (including possible leaks)
#    Hmmm, I wonder if this masks some real leaks.  I think it does.
#    Will need to fix that.
#

{
   Suppress leaking the GIL.  Happens once per process, see comment in ceval.c.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_InitThreads
}

{
   Suppress leaking the GIL after a fork.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_allocate_lock
   fun:PyEval_ReInitThreads
}

{
   Suppress leaking the autoTLSkey.  This looks like it shouldn't leak though.
   Memcheck:Leak
   fun:malloc
   fun:PyThread_create_key
   fun:_PyGILState_Init
   fun:Py_InitializeEx
   fun:Py_Main
}

{
   Hmmm, is this a real leak or like the GIL?
   Memcheck:Leak
   fun:malloc
   fun:PyThread_ReInitTLS
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:realloc
   fun:_PyObject_GC_Resize
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_New
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

{
   Handle PyMalloc confusing valgrind (possibly leaked)
   Memcheck:Leak
   fun:malloc
   fun:_PyObject_GC_NewVar
   fun:COMMENT_THIS_LINE_TO_DISABLE_LEAK_WARNING
}

#
# Non-python specific leaks
#

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:calloc
   fun:allocate_dtv
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   Handle pthread issue (possibly leaked)
   Memcheck:Leak
   fun:memalign
   fun:_dl_allocate_tls_storage
   fun:_dl_allocate_tls
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Free
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Addr4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Invalid read of size 4
   Memcheck:Value4
   fun:PyObject_Realloc
}

{
   ADDRESS_IN_RANGE/Conditional jump or move depends on uninitialised value
   Memcheck:Cond
   fun:PyObject_Realloc
}


### All the suppressions below are for errors that occur within libraries
### that Python uses.  The problems to not appear to be related to Python's
### use of the libraries.


{
   Generic ubuntu ld problems
   Memcheck:Addr8
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
   obj:/lib/ld-2.4.so
}

{
   Generic gentoo ld problems
   Memcheck:Cond
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
   obj:/lib/ld-2.3.4.so
}

{
   DBM problems, see test_dbm
   Memcheck:Param
   write(buf)
   fun:write
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_close
}

{
   DBM problems, see test_dbm
   Memcheck:Value8
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   DBM problems, see test_dbm
   Memcheck:Cond
   fun:memmove
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   obj:/usr/lib/libdb1.so.2
   fun:dbm_store
   fun:dbm_ass_sub
}

{
   GDBM problems, see test_gdbm
   Memcheck:Param
   write(buf)
   fun:write
   fun:gdbm_open

}

{
   ZLIB problems, see test_gzip
   Memcheck:Cond
   obj:/lib/libz.so.1.2.3
   obj:/lib/libz.so.1.2.3
   fun:deflate
}

{
   Avoid problems w/readline doing a putenv and leaking on exit
   Memcheck:Leak
   fun:malloc
   fun:xmalloc
   fun:sh_set_lines_and_columns
   fun:_rl_get_screen_size
   fun:_rl_init_terminal_io
   obj:/lib/libreadline.so.4.3
   fun:rl_initialize
}

